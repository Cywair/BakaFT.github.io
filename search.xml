<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用API获取学堂在线课堂练习答案</title>
    <url>/2020/05/14/%E5%88%A9%E7%94%A8API%E8%8E%B7%E5%8F%96%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<h2 id="补充-本文仅仅涉及到单选题"><a href="#补充-本文仅仅涉及到单选题" class="headerlink" title="补充:本文仅仅涉及到单选题"></a>补充:本文仅仅涉及到单选题</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文内容会涉及到以下文章的内容，建议首先阅读以下文章</p>
<blockquote>
<p><a href="https://www.cnblogs.com/bakaft/p/12670088.html" target="_blank" rel="noopener">https://www.cnblogs.com/bakaft/p/12670088.html</a></p>
<p>学堂在线课程页面URL和JSON的简单分析</p>
</blockquote>
<h2 id="先康康效果"><a href="#先康康效果" class="headerlink" title="先康康效果"></a>先康康效果</h2><p><img src="/2020/05/14/%E5%88%A9%E7%94%A8API%E8%8E%B7%E5%8F%96%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0%E7%AD%94%E6%A1%88/1.png" alt="1"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>学堂在线的课堂练习题目通过下面这个API返回</p>
<blockquote>
<p><a href="https://next.xuetangx.com/api/v1/lms/exercise/get_exercise_list/224269/" target="_blank" rel="noopener">https://next.xuetangx.com/api/v1/lms/exercise/get_exercise_list/224269/</a></p>
<p>其中的 224269 在后文会提及     </p>
<p>发送GET请求时应携带cookies</p>
<p>API返回形式:json</p>
</blockquote>
<p>之前看到有人写了个优学院(Ulearning)自动答题脚本，原理就是利用了优学院的获取答案的API</p>
<p>我就想看看，这个json里会不会有答案呢？</p>
<p>结果看了一下，还真就有。。</p>
<p>JSON结构在这里不多分析了，直接看答案在哪</p>
<p>如图<img src="/2020/05/14/%E5%88%A9%E7%94%A8API%E8%8E%B7%E5%8F%96%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0%E7%AD%94%E6%A1%88/2.png" alt="2"></p>
<p>JSON-data-probelms-x(问题序号,从0开始)-user-answer</p>
<p>(原谅我笨拙的表达方法..不太懂json)</p>
<h2 id="简单的python实现"><a href="#简单的python实现" class="headerlink" title="简单的python实现"></a>简单的python实现</h2><p>拿这个练习举例</p>
<blockquote>
<p><a href="https://next.xuetangx.com/learn/THU05021000376/THU05021000376/1515481/exercise/1340122" target="_blank" rel="noopener">https://next.xuetangx.com/learn/THU05021000376/THU05021000376/1515481/exercise/1340122</a></p>
</blockquote>
<blockquote>
<p>然而，它最终对应的题目数据API链接是</p>
<p><a href="https://next.xuetangx.com/api/v1/lms/exercise/get_exercise_list/224269/" target="_blank" rel="noopener">https://next.xuetangx.com/api/v1/lms/exercise/get_exercise_list/224269/</a></p>
</blockquote>
<p>这里，1340122就是<strong>上篇文章</strong>提到的页id，而这个 <code>224269</code> ，方便起见，我这里就叫它 <code>答案ID</code> 吧</p>
<p>那么这个答案ID是怎么来的？</p>
<blockquote>
<p>在这个API返回的json里</p>
<p><a href="https://next.xuetangx.com/api/v1/lms/learn/leaf_info/1515481/1340122/?sign=THU05021000376" target="_blank" rel="noopener">https://next.xuetangx.com/api/v1/lms/learn/leaf_info/1515481/1340122/?sign=THU05021000376</a></p>
<p>这个URL的参数在上篇文章都有提及</p>
<p>请带cookies发送GET请求</p>
<p>通过这个，可以查询到当前 <code>页</code>的信息，也就是 <code>leaf_info</code></p>
<p>其中可以提取到 <code>leaf_type_id</code> ，也就是我说的 <code>答案ID</code> </p>
<p>目前来看，只有 <code>exercise</code>  和<code>quiz</code>类型的 <code>页</code> 对象 才会有具体值,其他对象的 <code>leaf_type_id</code> 值为 <code>null</code></p>
</blockquote>
<p>完成上面的理解之后，就可以拿Python来写个小程序实现一下</p>
<p>代码风格不太健康，仅供参考</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers =&#123;&#125;  <span class="comment">#只需要提供cookie就好</span></span><br><span class="line">response = requests.get(<span class="string">'https://next.xuetangx.com/api/v1/lms/exercise/get_exercise_list/224270/'</span>, headers=headers)</span><br><span class="line"></span><br><span class="line">Dict = response.json() <span class="comment">#把json直接转成dict</span></span><br><span class="line">problems = Dict[<span class="string">'data'</span>][<span class="string">'problems'</span>]</span><br><span class="line">answers = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> problem <span class="keyword">in</span> problems:</span><br><span class="line">    answer = problem[<span class="string">'user'</span>][<span class="string">'answer'</span>][<span class="number">0</span>]</span><br><span class="line">    answers = answers + answer</span><br><span class="line">print(<span class="string">'答案就是！！'</span> + answers)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment">#答案就是！！CCCAACCCCBAC</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>学堂在线</tag>
        <tag>Python</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>动手写一个课堂在线答案获取工具</title>
    <url>/2020/05/14/%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E8%AF%BE%E5%A0%82%E5%9C%A8%E7%BA%BF%E7%AD%94%E6%A1%88%E8%8E%B7%E5%8F%96%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过这个API获取所有的 <code>leaf_id</code></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;next.xuetangx.com&#x2F;api&#x2F;v1&#x2F;lms&#x2F;learn&#x2F;course&#x2F;chapter?cid&#x3D;1515741&amp;sign&#x3D;THU08091000247&amp;etag_id&#x3D;11</span><br><span class="line">其实就是在请求获取章节目录的API时增加了一个参数 etag_id&#x3D;11，使得返回值只有作业章节</span><br></pre></td></tr></table></figure>
</blockquote>
<p>利用循环，对每一个章节都进行如下操作:</p>
<p>通过这个API获取当前作业章节的<code>leaf_type_id</code></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;next.xuetangx.com&#x2F;api&#x2F;v1&#x2F;lms&#x2F;learn&#x2F;leaf_info&#x2F;1515481&#x2F;1340122&#x2F;?sign&#x3D;THU05021000376</span><br></pre></td></tr></table></figure>
</blockquote>
<p>通过这个API进行当前作业章节的题目信息查询:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;next.xuetangx.com&#x2F;api&#x2F;v1&#x2F;lms&#x2F;exercise&#x2F;get_exercise_list&#x2F;224269&#x2F;</span><br><span class="line">其中224269是 leaf_type_id</span><br></pre></td></tr></table></figure>

<p>再对查询结果进行整理为字典集合和 JSON，并根据需要进行输出</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JSON </span></span><br><span class="line"><span class="comment">//JSON标准推荐使用双引号</span></span><br><span class="line">[</span><br><span class="line">&#123;<span class="attr">"chapter_name"</span>:<span class="string">"what"</span>,<span class="attr">"exercise_name"</span>:<span class="string">"what"</span>,<span class="attr">"leaf_id"</span>:<span class="string">"what"</span>,<span class="attr">"answers"</span>:&#123;<span class="attr">"1"</span>:<span class="string">"a"</span>,<span class="attr">"2"</span>:<span class="string">"b"</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="attr">"chapter_name"</span>:<span class="string">"what"</span>,<span class="attr">"exercise_name"</span>:<span class="string">"what"</span>,<span class="attr">"leaf_id"</span>:<span class="string">"what"</span>,<span class="attr">"answers"</span>:&#123;<span class="attr">"1"</span>:<span class="string">"a"</span>,<span class="attr">"2"</span>:<span class="string">"b"</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="attr">"chapter_name"</span>:<span class="string">"what"</span>,<span class="attr">"exercise_name"</span>:<span class="string">"what"</span>,<span class="attr">"leaf_id"</span>:<span class="string">"what"</span>,<span class="attr">"answers"</span>:&#123;<span class="attr">"1"</span>:<span class="string">"a"</span>,<span class="attr">"2"</span>:<span class="string">"b"</span>&#125;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Python列表</span></span><br><span class="line">[</span><br><span class="line">&#123;<span class="string">"chapter_name"</span>:<span class="string">"what"</span>,<span class="string">"exercise_name"</span>:<span class="string">"what"</span>,<span class="string">"leaf_id"</span>:<span class="string">"what"</span>,<span class="string">"answers"</span>:&#123;<span class="string">"1"</span>:<span class="string">"a"</span>,<span class="string">"2"</span>:<span class="string">"b"</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="string">"chapter_name"</span>:<span class="string">"what"</span>,<span class="string">"exercise_name"</span>:<span class="string">"what"</span>,<span class="string">"leaf_id"</span>:<span class="string">"what"</span>,<span class="string">"answers"</span>:&#123;<span class="string">"1"</span>:<span class="string">"a"</span>,<span class="string">"2"</span>:<span class="string">"b"</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="string">"chapter_name"</span>:<span class="string">"what"</span>,<span class="string">"exercise_name"</span>:<span class="string">"what"</span>,<span class="string">"leaf_id"</span>:<span class="string">"what"</span>,<span class="string">"answers"</span>:&#123;<span class="string">"1"</span>:<span class="string">"a"</span>,<span class="string">"2"</span>:<span class="string">"b"</span>&#125;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h2 id="数据整理的实现-1"><a href="#数据整理的实现-1" class="headerlink" title="数据整理的实现-1"></a>数据整理的实现-1</h2><p>引用必要模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br></pre></td></tr></table></figure>

<p>设定一些参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'authority'</span>: <span class="string">'next.xuetangx.com'</span>,</span><br><span class="line">    <span class="string">'pragma'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">    <span class="string">'cache-control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">    <span class="string">'django-language'</span>: <span class="string">'zh'</span>,</span><br><span class="line">    <span class="string">'accept-language'</span>: <span class="string">'zh'</span>,</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'accept'</span>: <span class="string">'application/json, text/plain, */*'</span>,</span><br><span class="line">    <span class="string">'x-client'</span>: <span class="string">'web'</span>,</span><br><span class="line">    <span class="string">'xtbz'</span>: <span class="string">'xt'</span>,</span><br><span class="line">    <span class="string">'x-csrftoken'</span>: <span class="string">'4YQSdvNYraBV2CxQtGi1waFdy7gBmHUH'</span>,</span><br><span class="line">    <span class="string">'sec-fetch-site'</span>: <span class="string">'same-origin'</span>,</span><br><span class="line">    <span class="string">'sec-fetch-mode'</span>: <span class="string">'cors'</span>,</span><br><span class="line">    <span class="string">'referer'</span>: <span class="string">'https://next.xuetangx.com/learn/THU08091000247/THU08091000247/1515741/exercise/1358559'</span>,</span><br><span class="line">    <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">    <span class="string">'cookie'</span>: <span class="string">'_log_user_id=adec78f86336c2946491a0d9493e4a7c; login_type=P; csrftoken=4YQSdvNYraBV2CxQtGi1waFdy7gBmHUH; sessionid=tl8otbrl61kyslmnkdmp3hkfg04vw1ws; sharesessionid=; k=14149126; django_language=zh-cn'</span>,&#125;</span><br><span class="line">data = [] <span class="comment">#数据存储</span></span><br></pre></td></tr></table></figure>



<p><strong>为了把内容分的清晰一些，这里用几个函数的形式拼凑整个程序，会导致一些性能浪费，可自行再优化。</strong></p>
<p>先写出第一个函数，把所有的 <code>leaf_id</code> 拿到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_exercise_ids</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'cid(比如1515741) : '</span>)</span><br><span class="line">    cid = input()</span><br><span class="line">    print(<span class="string">'sign(比如THU08091000247): '</span>)</span><br><span class="line">    sign = input()</span><br><span class="line">    sign = <span class="string">'THU08091000247'</span></span><br><span class="line">    params = (</span><br><span class="line">        (<span class="string">'cid'</span>, cid),</span><br><span class="line">        (<span class="string">'sign'</span>, sign),</span><br><span class="line">        (<span class="string">'etag_id'</span>, <span class="number">11</span>), <span class="comment">#etag参数可以用于过滤目录,11即只有作业</span></span><br><span class="line">    )</span><br><span class="line">    index_json_url = <span class="string">'https://next.xuetangx.com/api/v1/lms/learn/course/chapter'</span></span><br><span class="line">    index_dict = requests.get(index_json_url, headers = headers, params=params ).json()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#course_name = index_dict['data']['course_name']</span></span><br><span class="line">    <span class="comment">#course_id = index_dict['data']['course_id']</span></span><br><span class="line">    course_chapters = index_dict[<span class="string">'data'</span>][<span class="string">'course_chapter'</span>]</span><br><span class="line">    <span class="keyword">for</span> chapter <span class="keyword">in</span> course_chapters:</span><br><span class="line">        chapter_name = chapter[<span class="string">'name'</span>]</span><br><span class="line">        <span class="comment">#chapter_id = chapter['id']</span></span><br><span class="line">        course_sections = chapter[<span class="string">'section_leaf_list'</span>] <span class="comment">#部分section下没有leaf 所以要下面加一个判定,这也是为什么这里叫section_leaf_list</span></span><br><span class="line">        <span class="keyword">for</span> section <span class="keyword">in</span>  course_sections:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'leaf_list'</span> <span class="keyword">in</span> section:</span><br><span class="line">                course_leafs = section[<span class="string">'leaf_list'</span>]</span><br><span class="line">                <span class="keyword">for</span> leaf <span class="keyword">in</span> course_leafs:</span><br><span class="line">                    leaf_name = leaf[<span class="string">'name'</span>]</span><br><span class="line">                    leaf_id = leaf[<span class="string">'id'</span>]</span><br><span class="line">                    data.append(&#123;<span class="string">"chapter_name"</span>: chapter_name, <span class="string">"exercise_name"</span>: leaf_name , <span class="string">"leaf_id"</span>:leaf_id&#125;)</span><br><span class="line">                    <span class="comment">#leaf_type = leaf['leaf_type']</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                leaf_name = section[<span class="string">'name'</span>]</span><br><span class="line">                leaf_id = section[<span class="string">'id'</span>]</span><br><span class="line">                data.append(&#123;<span class="string">"chapter_name"</span>: chapter_name, <span class="string">"exercise_name"</span>: leaf_name, <span class="string">"leaf_id"</span>: leaf_id&#125;)</span><br><span class="line">                <span class="comment">#leaf_type = section['leaf_type']</span></span><br><span class="line">    <span class="keyword">return</span> cid, sign <span class="comment">#给下一个函数用</span></span><br></pre></td></tr></table></figure>

<p>再遍历字典，获取所有<code>leaf_id</code>对应的<code>leaf_type_id</code>并写入字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_exercise_leaf_type_ids</span><span class="params">()</span>:</span></span><br><span class="line">    cid, sign = get_exercise_ids()</span><br><span class="line">    params = (</span><br><span class="line">        (<span class="string">'sign'</span>, sign),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> data:</span><br><span class="line">        leafinfo_url = <span class="string">'https://next.xuetangx.com/api/v1/lms/learn/leaf_info/'</span>+ str(cid) + <span class="string">'/'</span> + str(each[<span class="string">'leaf_id'</span>]) +<span class="string">'/'</span></span><br><span class="line">        leafinfo_dict = requests.get(leafinfo_url, headers=headers, params=params).json()</span><br><span class="line">        leaf_type_id = leafinfo_dict[<span class="string">'data'</span>][<span class="string">'content_info'</span>][<span class="string">'leaf_type_id'</span>]</span><br><span class="line">        each[<span class="string">'leaf_type_id'</span>] = leaf_type_id</span><br></pre></td></tr></table></figure>

<p>下一个函数就是对答案的整理了，在这之前，先看一下各种题目答案的储存方式</p>
<h2 id="不同类型答案的数据储存结构"><a href="#不同类型答案的数据储存结构" class="headerlink" title="不同类型答案的数据储存结构"></a>不同类型答案的数据储存结构</h2><h3 id="单选题-Singlechoice"><a href="#单选题-Singlechoice" class="headerlink" title="单选题 Singlechoice"></a>单选题 Singlechoice</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">"answer": [</span><br><span class="line">            <span class="string">"B"</span></span><br><span class="line">          ]</span><br><span class="line"><span class="comment">//因为是单选，所以答案具有唯一性</span></span><br></pre></td></tr></table></figure>

<h3 id="判断题-Judgement"><a href="#判断题-Judgement" class="headerlink" title="判断题 Judgement"></a>判断题 Judgement</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">"answer": [</span><br><span class="line">            <span class="string">"false"</span></span><br><span class="line">          ]</span><br><span class="line"><span class="comment">//true or false</span></span><br></pre></td></tr></table></figure>

<h3 id="填空题-Fillblanks"><a href="#填空题-Fillblanks" class="headerlink" title="填空题 Fillblanks"></a>填空题 Fillblanks</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">"answers": &#123;</span><br><span class="line">            "1": [</span><br><span class="line">              <span class="string">"关系"</span></span><br><span class="line">            ],</span><br><span class="line">            "2": [</span><br><span class="line">              <span class="string">"条件"</span></span><br><span class="line">            ],</span><br><span class="line">            "3": [</span><br><span class="line">              <span class="string">"逗号"</span></span><br><span class="line">            ],</span><br><span class="line">            "4": [</span><br><span class="line">              <span class="string">"逻辑"</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">// 一个填空题下可能有几个小题，所以这里用了字典的方式</span></span><br><span class="line"><span class="comment">// 一个小题里可能有好几个空，所以这里用的列表，而不是单个值</span></span><br></pre></td></tr></table></figure>

<h3 id="多选题-MultipleChoice"><a href="#多选题-MultipleChoice" class="headerlink" title="多选题 MultipleChoice"></a>多选题 MultipleChoice</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"answer": [</span><br><span class="line">            "A",</span><br><span class="line">            "D",</span><br><span class="line">            <span class="string">"F"</span></span><br><span class="line">          ]</span><br></pre></td></tr></table></figure>

<h2 id="数据整理的实现-2"><a href="#数据整理的实现-2" class="headerlink" title="数据整理的实现-2"></a>数据整理的实现-2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_answers</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> data:</span><br><span class="line">        exercise_url = <span class="string">'https://next.xuetangx.com/api/v1/lms/exercise/get_exercise_list/'</span> + str(each[<span class="string">'leaf_type_id'</span>]) + <span class="string">'/'</span></span><br><span class="line">        exercise_dict = requests.get(exercise_url, headers=headers).json()</span><br><span class="line">        <span class="comment">#problem_name = problem_dict['data']['description']</span></span><br><span class="line">        problems = exercise_dict[<span class="string">'data'</span>][<span class="string">'problems'</span>]</span><br><span class="line">        answers = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> problem <span class="keyword">in</span> problems:</span><br><span class="line">            count =  str(problem[<span class="string">'index'</span>])</span><br><span class="line">            problem_type = problem[<span class="string">'content'</span>][<span class="string">'Type'</span>]</span><br><span class="line">            <span class="keyword">if</span> problem_type == <span class="string">'SingleChoice'</span>:</span><br><span class="line">                answer = problem[<span class="string">'user'</span>][<span class="string">'answer'</span>][<span class="number">0</span>]</span><br><span class="line">                answers[count] = answer</span><br><span class="line">            <span class="keyword">elif</span> problem_type == <span class="string">'FillBlank'</span>:</span><br><span class="line">                answer = problem[<span class="string">'user'</span>][<span class="string">'answers'</span>] <span class="comment"># a dict</span></span><br><span class="line">                answers[count] = answer</span><br><span class="line">            <span class="keyword">elif</span> problem_type == <span class="string">'Judgement'</span>:</span><br><span class="line">                answer = problem[<span class="string">'user'</span>][<span class="string">'answer'</span>]</span><br><span class="line">                answers[count] = answer[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">elif</span> problem_type == <span class="string">'MultipleChoice'</span>:</span><br><span class="line">                answer = problem[<span class="string">'user'</span>][<span class="string">'answer'</span>] <span class="comment"># a list</span></span><br><span class="line">                answers[count] = answer</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'题目类型未知，请反馈一下下面的ID\n'</span>)</span><br><span class="line">                print(each[<span class="string">'leaf_type_id'</span>])</span><br><span class="line">        each[<span class="string">'answers'</span>] = answers</span><br></pre></td></tr></table></figure>

<p>最后来试一下效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get_exercise_leaf_type_ids()</span><br><span class="line">get_answers()</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

<p>输出的效果</p>
<p><img src="/2020/05/14/%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E8%AF%BE%E5%A0%82%E5%9C%A8%E7%BA%BF%E7%AD%94%E6%A1%88%E8%8E%B7%E5%8F%96%E5%B7%A5%E5%85%B7/1.png" alt="1"></p>
<h2 id="实用化输出"><a href="#实用化输出" class="headerlink" title="实用化输出"></a>实用化输出</h2><h3 id="导出为JSON备用"><a href="#导出为JSON备用" class="headerlink" title="导出为JSON备用"></a>导出为JSON备用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data2json</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"data.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">':'</span>)))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>学堂在线</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>学堂在线课程页面URL和JSON的简单分析</title>
    <url>/2020/05/14/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E8%AF%BE%E7%A8%8B%E9%A1%B5%E9%9D%A2URL%E5%92%8CJSON%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="学堂在线课程URL分析"><a href="#学堂在线课程URL分析" class="headerlink" title="学堂在线课程URL分析"></a>学堂在线课程URL分析</h2><p>以<strong>清华大学</strong>的<strong>C++语言程序设计基础(2020春)</strong>和<strong>生活英语听说(2020春)</strong>为例</p>
<p>课程界面如下</p>
<p><img src="/2020/05/14/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E8%AF%BE%E7%A8%8B%E9%A1%B5%E9%9D%A2URL%E5%92%8CJSON%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/1.png" alt="1"></p>
<p>目录中有5种单元对象:</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>视频(video)</td>
<td><a href="https://next.xuetangx.com/learn/THU08091000247/THU08091000247/1515741/video/1358540" target="_blank" rel="noopener">https://next.xuetangx.com/learn/THU08091000247/THU08091000247/1515741/video/1358540</a></td>
</tr>
<tr>
<td>图文(article)</td>
<td><a href="https://next.xuetangx.com/learn/THU08091000247/THU08091000247/1515741/article/1358541" target="_blank" rel="noopener">https://next.xuetangx.com/learn/THU08091000247/THU08091000247/1515741/article/1358541</a></td>
</tr>
<tr>
<td>作业(exercise)</td>
<td><a href="https://next.xuetangx.com/learn/THU08091000247/THU08091000247/1515741/exercise/1358558" target="_blank" rel="noopener">https://next.xuetangx.com/learn/THU08091000247/THU08091000247/1515741/exercise/1358558</a></td>
</tr>
<tr>
<td>考试(quiz)</td>
<td><a href="https://next.xuetangx.com/learn/THU05021000376/THU05021000376/1515481/quiz/1340243" target="_blank" rel="noopener">https://next.xuetangx.com/learn/THU05021000376/THU05021000376/1515481/quiz/1340243</a>  <strong>(清华大学-生活英语听说(2020春)</strong></td>
</tr>
<tr>
<td>讨论(discussion)</td>
<td><a href="https://next.xuetangx.com/learn/THU05021000376/THU05021000376/1515481/discussion/3934275" target="_blank" rel="noopener">https://next.xuetangx.com/learn/THU05021000376/THU05021000376/1515481/discussion/3934275</a> <strong>(清华大学-生活英语听说(2020春)</strong></td>
</tr>
</tbody></table>
<p>可以看出，URL规则比较简单</p>
<p>首先是</p>
<blockquote>
<p>next.xuetangx.com/learn/</p>
</blockquote>
<p>紧接着是重复了两次的数字</p>
<blockquote>
<p>THU 0809 1000 247 <strong>C++</strong></p>
<p>THU 0502 1000 376 <strong>英语听说</strong></p>
<p>THU就是清华咯，0809应该是课程提交日期，1000摸不透，247应该是该学校上传课程的顺序ID。</p>
</blockquote>
<p>再接着是一个数字串，应该与课程ID相关</p>
<blockquote>
<p>1515481</p>
</blockquote>
<p>最后就是单元类型和这个单元的ID了</p>
<blockquote>
<p>article/135854</p>
<p>quiz/1340243</p>
<p><strong>注:只有这串数字ID在Json里有被返回</strong></p>
</blockquote>
<h2 id="课程页面返回的Json分析"><a href="#课程页面返回的Json分析" class="headerlink" title="课程页面返回的Json分析"></a>课程页面返回的Json分析</h2><p>一个课程的目录信息列表可以通过GET请求下面这样的URL得到(需要带cookies)</p>
<blockquote>
<p><a href="https://next.xuetangx.com/api/v1/lms/learn/course/chapter?cid=1515481&amp;sign=THU05021000376" target="_blank" rel="noopener">https://next.xuetangx.com/api/v1/lms/learn/course/chapter?cid=1515481&amp;sign=THU05021000376</a></p>
<p>返回形式: json </p>
<p>里面还有很多我没看懂的返回值，有兴趣可以自行研究</p>
</blockquote>
<p>这里拿 <strong>生活英语听说</strong> 做例子</p>
<p>这里先提前把Json的结构理一下</p>
<p>从外到里，一个目录的结构应该为</p>
<table>
<thead>
<tr>
<th>顺序</th>
<th>名称</th>
<th>注解</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>course</td>
<td>课</td>
</tr>
<tr>
<td>2</td>
<td>chapter</td>
<td>章</td>
</tr>
<tr>
<td>3</td>
<td>section</td>
<td>节</td>
</tr>
<tr>
<td>4</td>
<td>leaf</td>
<td>页(直译有丶抽象)</td>
</tr>
</tbody></table>
<p>拿截图来对应一下</p>
<p><img src="/2020/05/14/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E8%AF%BE%E7%A8%8B%E9%A1%B5%E9%9D%A2URL%E5%92%8CJSON%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/2.png" alt="2"></p>
<p>了解完这个层次之后，后面就好理解一些了</p>
<p>拿到Json后，拖到Bejson看一下</p>
<p><img src="/2020/05/14/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E8%AF%BE%E7%A8%8B%E9%A1%B5%E9%9D%A2URL%E5%92%8CJSON%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/3.png" alt="3"></p>
<p>可以看到，所有数据都在名为 <code>data</code> 的JsonObject里</p>
<table>
<thead>
<tr>
<th>course_id</th>
<th>课的id咯</th>
</tr>
</thead>
<tbody><tr>
<td>course_name</td>
<td>课名</td>
</tr>
<tr>
<td>course_chapter</td>
<td>该课的所有章的集合</td>
</tr>
</tbody></table>
<p>从0开始，<code>course_chapter</code>里每一个JsonObject代表一个章</p>
<p>这里的10个JsonObject恰好与目录的10个单元相对应</p>
<p>这里展开 <code>0</code>代表的第一章 后可以看到一些数据</p>
<table>
<thead>
<tr>
<th>order</th>
<th>章的绝对顺序,0开始</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>章的ID</td>
</tr>
<tr>
<td>name</td>
<td>章名</td>
</tr>
<tr>
<td>section_leaf_list</td>
<td>该章的所有节的集合</td>
</tr>
</tbody></table>
<p>类似地，</p>
<p>从0开始,<code>sectiopn_leaf_list</code>里每一个JsonObject代表一个节</p>
<p>这里11个JsonObject恰好与第一章中的10个小节对应</p>
<p>这里展开 <code>0</code> 代表的第一节，可以看到以下数据</p>
<table>
<thead>
<tr>
<th>order</th>
<th>节的绝对顺序,0开始</th>
</tr>
</thead>
<tbody><tr>
<td>chapter_id</td>
<td>章的id</td>
</tr>
<tr>
<td>id</td>
<td>节的id</td>
</tr>
<tr>
<td>name</td>
<td>节名</td>
</tr>
<tr>
<td>leaf_list</td>
<td>该节所有页的集合</td>
</tr>
</tbody></table>
<p>类似地,</p>
<p>从0开始,<code>leaf_list</code>里地每一个JsonObject代表一个页</p>
<p>这里1个JsonObject恰好与第一章第一节中的1个页对应</p>
<p>这里展开 <code>0</code>代表的第一页(也是唯一一页),可以看到以下内容</p>
<table>
<thead>
<tr>
<th>name</th>
<th>页名</th>
</tr>
</thead>
<tbody><tr>
<td>is_locked</td>
<td>锁定状态，这个可能会用于quiz类型的单元，用于限制学生对单元的访问，比如考完后该项直接改为true，禁止重考</td>
</tr>
<tr>
<td>start_time</td>
<td>毫秒制的unix时间戳，代表第一次观看时间</td>
</tr>
<tr>
<td>chapter_id</td>
<td>章id</td>
</tr>
<tr>
<td>section_id</td>
<td>节id</td>
</tr>
<tr>
<td>leaf_type</td>
<td>目前我还没看到其他的type</td>
</tr>
<tr>
<td>id</td>
<td>页的id   <strong>(这个就是URL的最后一部分数字)</strong></td>
</tr>
<tr>
<td>is_show</td>
<td>不清楚，该页是否可见？</td>
</tr>
<tr>
<td>end_time</td>
<td>第一次看完的时间？为什么我这里看过了但是值是0呢</td>
</tr>
<tr>
<td>score_deadline</td>
<td>观看截止日期</td>
</tr>
<tr>
<td>is_score</td>
<td>不清楚</td>
</tr>
<tr>
<td>is_assessed</td>
<td>不清楚</td>
</tr>
<tr>
<td>order</td>
<td>页的绝对顺序,0开始</td>
</tr>
<tr>
<td>leafinfo_id</td>
<td>页信息id (<strong>虽然不知道这id用来干啥的..</strong>)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>学堂在线</tag>
      </tags>
  </entry>
</search>
